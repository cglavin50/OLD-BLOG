<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Terminal</title>
    <link>https://cglavin50.github.io/posts/</link>
    <description>Recent content in Posts on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Apr 2023 20:23:48 -0400</lastBuildDate><atom:link href="https://cglavin50.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MongoDB Atlas</title>
      <link>https://cglavin50.github.io/posts/mongodbatlas/</link>
      <pubDate>Sun, 09 Apr 2023 20:23:48 -0400</pubDate>
      
      <guid>https://cglavin50.github.io/posts/mongodbatlas/</guid>
      <description>Today I learned&amp;hellip; As I was crunched for time, my goal for today was to mobilize my ToDoList App project from a local DB to a cloud-based one. While in the future I plan to switch to a relational DB, in my original project I wanted to learn more about APIs, so I picked Mongo to get experience working with a nonSQL DB.
MongoDB Atlas MongoDB offers a cloud-based option called Atlas, which comes with a Hobbyist tiers for new developers.</description>
      <content>&lt;h1 id=&#34;today-i-learned&#34;&gt;Today I learned&amp;hellip;&lt;/h1&gt;
&lt;p&gt;As I was crunched for time, my goal for today was to mobilize my ToDoList App project from a local DB to a cloud-based one. While in the future I plan to switch to a relational DB, in my original project I wanted to learn more about APIs, so I picked Mongo to get experience working with a nonSQL DB.&lt;/p&gt;
&lt;h2 id=&#34;mongodb-atlas&#34;&gt;MongoDB Atlas&lt;/h2&gt;
&lt;p&gt;MongoDB offers a cloud-based option called Atlas, which comes with a Hobbyist tiers for new developers. The layout was essentially the same as MongoDB Compass, where I run my local deployment, with everything running within a project scale. Each project has database deployments same as Compass, and each deployment can be configured as a cloud-cluster. Beyond that, each project has a network scope, defining who can connect to this project, as well as users which define access permissions (read/write on a db deployment basis). As I have the most experience with AWS, I chose to run my cloud deployment for my ToDoList DB over AWS out of the presented options from Atlas.&lt;/p&gt;
&lt;h3 id=&#34;pain-points&#34;&gt;Pain Points&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve never managed user/passwords over URLs, so I needed to learn about URL encoding to make sure everything was protected. The MongoDB client implicitly will run a TLS handshake so there&amp;rsquo;s encryption there, but to deal with special characters, I used the URL.QueryString and URL.Values.Encode functions to embed the the authentication into the URI string.
Another pain point I encountered was dealing with my internets subnetting scheme. As I live on-campus, the network I access from leads to tons of issues with permissions, so I tried to debug what range of acceptable IPs would work with Atlas. Starting with 0.0.0.0, I eventually figured out that Georgetown maintains a /16 instead of a /17, which after updating seemed to fix my issues.
One last aside, I also learned how to properly manage cron jobs, and set up a bash script that should backup (ex commit and push) the repos for this blog every day, so I can just create the posts and not worry about commiting and everything before I log off for the day.
All in all this was a busy day with not a ton of time to code, so I didn&amp;rsquo;t run into that many noteworthy topics. Now that I&amp;rsquo;ve set the DB to be able to run independently of the actual web app, I&amp;rsquo;m going to look into creating a Docker image for this whole project.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Intro to Hugo!</title>
      <link>https://cglavin50.github.io/posts/myfirstpost/</link>
      <pubDate>Sat, 08 Apr 2023 15:05:27 -0400</pubDate>
      
      <guid>https://cglavin50.github.io/posts/myfirstpost/</guid>
      <description>This is my first post on this site, so I&amp;rsquo;m going to cover what I&amp;rsquo;ve learned about Hugo.
What is Hugo? Hugo is a web-development framework that runs in Go, translating markdown documents to HTML, adding community-built themes to provide CSS styling. All in all, it gives us a great package to set up and run a static webpage. While there are a ton of options out there (many built on JS), Hugo has a wide variety of tools for developing a more complex site (including API-driven content and customization), as well as incredibly fast build times.</description>
      <content>&lt;p&gt;This is my first post on this site, so I&amp;rsquo;m going to cover what I&amp;rsquo;ve learned about Hugo.&lt;/p&gt;
&lt;h1 id=&#34;what-is-hugo&#34;&gt;What is Hugo?&lt;/h1&gt;
&lt;p&gt;Hugo is a web-development framework that runs in Go, translating markdown documents to HTML, adding community-built themes to provide CSS styling. All in all, it gives us a great package to set up and run a static webpage. While there are a ton of options out there (many built on JS), Hugo has a wide variety of tools for developing a more complex site (including API-driven content and customization), as well as incredibly fast build times. I chose Hugo as I couldn&amp;rsquo;t resist a web-builder framework built in Go, and it&amp;rsquo;s plug-and-play themes made it an easy way to start this project.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-update-this-site&#34;&gt;How do I update this site?&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m still learning Hugo, so these are some notes before I forget how to deploy a new post. First of all, I&amp;rsquo;m hosting everything in my &amp;ldquo;blog&amp;rdquo; github repo, however the deployment is the actual GitHub pages repo. Hugo -t terminal builds the site pages with the theme terminal, which then directs all the output to the submodule pages repo. That way, I can run hugo server -t terminal, building the pages and getting a local run to make sure everything looks great and I can commit these changes. I locally installed the theme, so won&amp;rsquo;t worry about updating that (recommendation course of action is through Github actions). Posts are created with hugo new posts/postname, and other pages (ex about, links, etc) are all created/stored in the contents subdirectory. Hugo has set styling for the markdown pages that I&amp;rsquo;m still figuring out, so far now it is a copy-and-paste affair, coupled with the md formatting I already know.&lt;/p&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;
&lt;p&gt;Well, as I plan to do this daily I should likely schedule a cron job for commiting and updating the respective repos. I need to figure out where to locally store images so I can make my about page reflect me, and finish developing out the core of the website (about page, links, portfolio, menu), and keep writing!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
